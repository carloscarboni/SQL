--EDA

SELECT COUNT (*) from spotify;
SELECT COUNT(DISTINCT ARTIST) FROM spotify;
SELECT COUNT(DISTINCT ALBUM) FROM spotify;
SELECT DISTINCT ALBUM_TYPE FROM spotify;

SELECT max(DURATION_MIN) FROM spotify;
SELECT MIN (DURATION_MIN) FROM spotify

SELECT * FROM spotify WHERE DURATION_MIN = 0
DELETE FROM spotify WHERE DURATION_MIN = 0

SELECT distinct channel from spotify;
SELECT distinct most_playedon from spotify;

--		------------------------
-- Easy Level
-- 1) Retrieve the names of all tracks that have more than 1 billion streams.
-- 2) List all albums along with their respective artists.
-- 3) Get the total number of comments for tracks where licensed = TRUE.
-- 4) Find all tracks that belong to the album type single.
-- 5) Count the total number of tracks by each artist.

-- 1) Retrieve the names of all tracks that have more than 1 billion streams.

SELECT Artist,Track,Stream FROM spotify WHERE Stream > 1000000000


-- 2) List all albums along with their respective artists.
SELECT distinct Album, ARTIST FROM spotify 

-- 3) Get the total number of comments for tracks where licensed = TRUE.
Select SUM(Comments) as total_comments from spotify where licensed = 1

-- 4) Find all tracks that belong to the album type single.
Select track from spotify where album_type = 'single'

-- 5) Count the total number of tracks by each artist.
Select artist, COUNT(*) as total_No_songs from spotify group by Artist

--Medium Level
-- 6) Calculate the average danceability of tracks in each album.
-- 7) Find the top 5 tracks with the highest energy values.
-- 8) List all tracks along with their views and likes where official_video = TRUE.
-- 9) For each album, calculate the total views of all associated tracks.
-- 10) Retrieve the track names that have been streamed on Spotify more than YouTube.

-- 6) Calculate the average danceability of tracks in each album.
SELECT album, AVG(danceability) AS avg_danceability 
FROM spotify 
GROUP BY album
ORDER BY avg_danceability DESC;

-- 7) Find the top 5 tracks with the highest energy values.
SELECT TOP 5 track, MAX(ENERGY) as max_energy
FROM spotify
GROUP BY Track
ORDER BY max_energy DESC

-- 8) List all tracks along with their views and likes where official_video = TRUE.
SELECT track, sum(views) as total_views, sum(likes) as total_likes
FROM spotify where official_video = 1
Group by track order by total_views DESC

-- 9) For each album, calculate the total views of all associated tracks.
SELECT album, track, SUM(views) as total_views
from spotify
group by Album, track order by total_views desc

-- 10) Retrieve the track names that have been streamed on Spotify more than YouTube.
	SELECT * FROM
	(select track,
	COALESCE(SUM(CASE WHEN most_playedon = 'Youtube' THEN stream END),0)as streamed_on_youtube,
	COALESCE(SUM(CASE WHEN most_playedon = 'Spotify' THEN stream END),0)as streamed_on_spotify
	from spotify group by Track
	) as t1
		WHERE streamed_on_spotify > streamed_on_youtube
		AND streamed_on_youtube <> 0

-- Advanced Level
-- 11) Find the top 3 most-viewed tracks for each artist using window functions.
-- 12) Write a query to find tracks where the liveness score is above the average.
-- 13) Use a WITH clause to calculate the difference between the highest and lowest energy values for tracks in each album.
-- 14) Find tracks where the energy-to-liveness ratio is greater than 1.2.
-- 15) Calculate the cumulative sum of likes for tracks ordered by the number of views, using window functions.


-- 11) Find the top 3 most-viewed tracks for each artist using window functions.

WITH ranking_artist as
(SELECT Artist, track, SUM(VIEWS) AS total_views, DENSE_RANK() OVER (PARTITION BY artist ORDER BY SUM(VIEWS) DESC) as rank
FROM spotify
GROUP BY Artist, track
)
SELECT * FROM ranking_artist WHERE RANK<=3
ORDER BY Artist, total_views DESC

-- 12) Write a query to find tracks where the liveness score is above the average.

SELECT track,artist,liveness FROM spotify
WHERE Liveness > (SELECT AVG(LIVENESS) FROM spotify)

-- 13) Use a WITH clause to calculate the difference between the highest and lowest energy values for tracks in each album.

WITH cte as
(SELECT artist, album, MAX(energy) as highest_energy, MIN(energy) as lowest_energy
FROM spotify
group by Album,artist
)
SELECT album, highest_energy - lowest_energy as energy_diff
from cte order by energy_diff desc


-- 14) Find tracks where the energy-to-liveness ratio is greater than 1.2.

WITH cte as
(SELECT track, sum(energy) as energy, sum(liveness) as liveness
FROM spotify
group by track
)
SELECT track, energy/liveness as energy_to_liveness_ratio
from cte WHERE energy/liveness > 1.2 order by energy_to_liveness_ratio DESC


-- 15) Calculate the cumulative sum of likes for tracks ordered by the number of views, using window functions.

SELECT track, artist, views, likes,
       SUM(likes) OVER (PARTITION BY artist ORDER BY views) AS cumulative_likes
FROM spotify
ORDER BY artist, views
